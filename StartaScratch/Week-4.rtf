Query-1: Calculate each user's average session time. A session is defined as the time difference between a page_load and page_exit. 
For simplicity, assume a user has only 1 session per day and if there are multiple of the same events on that day,
consider only the latest page_load and earliest page_exit. Output the user_id and their average session time.

ID: 10352

Solution:

WITH temp AS (
SELECT user_id, 
               MAX(CASE WHEN action= 'page_load' THEN timestamp ELSE null END) AS session_start,
               MIN(CASE WHEN action= 'page_exit'  THEN timestamp ELSE null END) AS session_end
FROM facebook_web_log
GROUP BY user_id, DATE(timestamp)
)

SELECT user_id, AVG(TIMESTAMPDIFF(SECOND, session_start, session_end)) AS average_difference
FROM temp
WHERE session_start IS NOT NULL AND session_end IS NOT NULL
GROUP BY user_id;


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


Query-2: Write a query that'll identify returning active users. 
A returning active user is a user that has made a second purchase within 7 days of any other of their purchases. 
Output a list of user_ids of these returning active users.

ID: 10322

Solution:

SELECT DISTINCT t1.user_id 
FROM amazon_transactions AS t1 
JOIN amazon_transactions AS t2
WHERE ABS(DATEDIFF(t1.created_at, t2.created_at)) <= 7 
AND t1.user_id = t2.user_id AND t1.id != t2.id 
GROUP BY t1.user_id
ORDER BY t1.user_id;





